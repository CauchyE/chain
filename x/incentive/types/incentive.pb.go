// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: incentive/incentive.proto

package types

import (
	fmt "fmt"
	github_com_ununifi_chain_types "github.com/UnUniFi/chain/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseClaim struct {
	Owner  github_com_ununifi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner" yaml:"owner"`
	Reward types.Coin                                      `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward" yaml:"reward"`
}

func (m *BaseClaim) Reset()         { *m = BaseClaim{} }
func (m *BaseClaim) String() string { return proto.CompactTextString(m) }
func (*BaseClaim) ProtoMessage()    {}
func (*BaseClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{0}
}
func (m *BaseClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseClaim.Merge(m, src)
}
func (m *BaseClaim) XXX_Size() int {
	return m.Size()
}
func (m *BaseClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseClaim.DiscardUnknown(m)
}

var xxx_messageInfo_BaseClaim proto.InternalMessageInfo

func (m *BaseClaim) GetReward() types.Coin {
	if m != nil {
		return m.Reward
	}
	return types.Coin{}
}

type BaseMultiClaim struct {
	Owner  github_com_ununifi_chain_types.StringAccAddress `protobuf:"bytes,1,opt,name=owner,proto3,customtype=github.com/UnUniFi/chain/types.StringAccAddress" json:"owner" yaml:"owner"`
	Reward []types.Coin                                    `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward" yaml:"rewards"`
}

func (m *BaseMultiClaim) Reset()         { *m = BaseMultiClaim{} }
func (m *BaseMultiClaim) String() string { return proto.CompactTextString(m) }
func (*BaseMultiClaim) ProtoMessage()    {}
func (*BaseMultiClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{1}
}
func (m *BaseMultiClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseMultiClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseMultiClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseMultiClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseMultiClaim.Merge(m, src)
}
func (m *BaseMultiClaim) XXX_Size() int {
	return m.Size()
}
func (m *BaseMultiClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseMultiClaim.DiscardUnknown(m)
}

var xxx_messageInfo_BaseMultiClaim proto.InternalMessageInfo

func (m *BaseMultiClaim) GetReward() []types.Coin {
	if m != nil {
		return m.Reward
	}
	return nil
}

type CdpMintingClaim struct {
	*BaseClaim    `protobuf:"bytes,1,opt,name=base_claim,json=baseClaim,proto3,embedded=base_claim" json:"base_claim,omitempty" yaml:"base_claim"`
	RewardIndexes []RewardIndex `protobuf:"bytes,2,rep,name=reward_indexes,json=rewardIndexes,proto3" json:"reward_indexes" yaml:"reward_indexes"`
}

func (m *CdpMintingClaim) Reset()         { *m = CdpMintingClaim{} }
func (m *CdpMintingClaim) String() string { return proto.CompactTextString(m) }
func (*CdpMintingClaim) ProtoMessage()    {}
func (*CdpMintingClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{2}
}
func (m *CdpMintingClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdpMintingClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CdpMintingClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CdpMintingClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdpMintingClaim.Merge(m, src)
}
func (m *CdpMintingClaim) XXX_Size() int {
	return m.Size()
}
func (m *CdpMintingClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_CdpMintingClaim.DiscardUnknown(m)
}

var xxx_messageInfo_CdpMintingClaim proto.InternalMessageInfo

func (m *CdpMintingClaim) GetRewardIndexes() []RewardIndex {
	if m != nil {
		return m.RewardIndexes
	}
	return nil
}

type RewardIndex struct {
	CollateralType string                                 `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
	RewardFactor   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reward_factor,json=rewardFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_factor" yaml:"reward_factor"`
}

func (m *RewardIndex) Reset()         { *m = RewardIndex{} }
func (m *RewardIndex) String() string { return proto.CompactTextString(m) }
func (*RewardIndex) ProtoMessage()    {}
func (*RewardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{3}
}
func (m *RewardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardIndex.Merge(m, src)
}
func (m *RewardIndex) XXX_Size() int {
	return m.Size()
}
func (m *RewardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_RewardIndex proto.InternalMessageInfo

func (m *RewardIndex) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

type Params struct {
	CdpMintingRewardPeriods []RewardPeriod `protobuf:"bytes,1,rep,name=cdp_minting_reward_periods,json=cdpMintingRewardPeriods,proto3" json:"cdp_minting_reward_periods" yaml:"cdp_minting_reward_periods"`
	ClaimMultipliers        []Multiplier   `protobuf:"bytes,2,rep,name=claim_multipliers,json=claimMultipliers,proto3" json:"claim_multipliers" yaml:"claim_multipliers"`
	ClaimEnd                time.Time      `protobuf:"bytes,3,opt,name=claim_end,json=claimEnd,proto3,stdtime" json:"claim_end" yaml:"claim_end"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCdpMintingRewardPeriods() []RewardPeriod {
	if m != nil {
		return m.CdpMintingRewardPeriods
	}
	return nil
}

func (m *Params) GetClaimMultipliers() []Multiplier {
	if m != nil {
		return m.ClaimMultipliers
	}
	return nil
}

func (m *Params) GetClaimEnd() time.Time {
	if m != nil {
		return m.ClaimEnd
	}
	return time.Time{}
}

type RewardPeriod struct {
	Active           bool       `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
	CollateralType   string     `protobuf:"bytes,2,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
	Start            time.Time  `protobuf:"bytes,3,opt,name=start,proto3,stdtime" json:"start" yaml:"start"`
	End              time.Time  `protobuf:"bytes,4,opt,name=end,proto3,stdtime" json:"end" yaml:"end"`
	RewardsPerSecond types.Coin `protobuf:"bytes,5,opt,name=rewards_per_second,json=rewardsPerSecond,proto3" json:"rewards_per_second" yaml:"rewards_per_second"`
}

func (m *RewardPeriod) Reset()         { *m = RewardPeriod{} }
func (m *RewardPeriod) String() string { return proto.CompactTextString(m) }
func (*RewardPeriod) ProtoMessage()    {}
func (*RewardPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{5}
}
func (m *RewardPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPeriod.Merge(m, src)
}
func (m *RewardPeriod) XXX_Size() int {
	return m.Size()
}
func (m *RewardPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPeriod proto.InternalMessageInfo

func (m *RewardPeriod) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *RewardPeriod) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

func (m *RewardPeriod) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *RewardPeriod) GetEnd() time.Time {
	if m != nil {
		return m.End
	}
	return time.Time{}
}

func (m *RewardPeriod) GetRewardsPerSecond() types.Coin {
	if m != nil {
		return m.RewardsPerSecond
	}
	return types.Coin{}
}

type Multiplier struct {
	Name         string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	MonthsLockup int64                                  `protobuf:"varint,2,opt,name=months_lockup,json=monthsLockup,proto3" json:"months_lockup,omitempty" yaml:"months_lockup"`
	Factor       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=factor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"factor" yaml:"factor"`
}

func (m *Multiplier) Reset()         { *m = Multiplier{} }
func (m *Multiplier) String() string { return proto.CompactTextString(m) }
func (*Multiplier) ProtoMessage()    {}
func (*Multiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fbd49a6c550bd8c, []int{6}
}
func (m *Multiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Multiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Multiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Multiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multiplier.Merge(m, src)
}
func (m *Multiplier) XXX_Size() int {
	return m.Size()
}
func (m *Multiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_Multiplier.DiscardUnknown(m)
}

var xxx_messageInfo_Multiplier proto.InternalMessageInfo

func (m *Multiplier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Multiplier) GetMonthsLockup() int64 {
	if m != nil {
		return m.MonthsLockup
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseClaim)(nil), "botany.incentive.BaseClaim")
	proto.RegisterType((*BaseMultiClaim)(nil), "botany.incentive.BaseMultiClaim")
	proto.RegisterType((*CdpMintingClaim)(nil), "botany.incentive.CdpMintingClaim")
	proto.RegisterType((*RewardIndex)(nil), "botany.incentive.RewardIndex")
	proto.RegisterType((*Params)(nil), "botany.incentive.Params")
	proto.RegisterType((*RewardPeriod)(nil), "botany.incentive.RewardPeriod")
	proto.RegisterType((*Multiplier)(nil), "botany.incentive.Multiplier")
}

func init() { proto.RegisterFile("incentive/incentive.proto", fileDescriptor_4fbd49a6c550bd8c) }

var fileDescriptor_4fbd49a6c550bd8c = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0x93, 0x6e, 0xd4, 0x4c, 0xb2, 0xd9, 0xac, 0xd5, 0x16, 0x27, 0xb4, 0xf6, 0x76, 0x90,
	0xa0, 0x95, 0xc0, 0x56, 0xcb, 0x0d, 0x09, 0xa1, 0x75, 0x96, 0x8a, 0x22, 0x56, 0x5a, 0xb9, 0xad,
	0x90, 0x7a, 0xb1, 0x26, 0xe3, 0x69, 0xea, 0xc6, 0x9e, 0xb1, 0x3c, 0x93, 0x76, 0xf3, 0x05, 0x38,
	0xf7, 0xab, 0x70, 0xe2, 0xc8, 0xb5, 0x1c, 0x90, 0xf6, 0x82, 0x84, 0x38, 0x18, 0xb4, 0xfb, 0x0d,
	0x72, 0xe6, 0x80, 0x3c, 0x33, 0x89, 0xbd, 0xdb, 0x5d, 0x96, 0x3d, 0x70, 0x8a, 0xdf, 0x9b, 0xf7,
	0x7e, 0xef, 0xf7, 0xfe, 0x06, 0x0c, 0x63, 0x8a, 0x09, 0x15, 0xf1, 0x6b, 0xe2, 0xad, 0xbf, 0xdc,
	0x2c, 0x67, 0x82, 0x99, 0x83, 0x09, 0x13, 0x88, 0x2e, 0xdc, 0xb5, 0x7e, 0x74, 0x63, 0xca, 0xa6,
	0x4c, 0x3e, 0x7a, 0xe5, 0x97, 0xb2, 0x1b, 0x39, 0x53, 0xc6, 0xa6, 0x09, 0xf1, 0xa4, 0x34, 0x99,
	0xbf, 0xf0, 0x44, 0x9c, 0x12, 0x2e, 0x50, 0x9a, 0x69, 0x03, 0x1b, 0x33, 0x9e, 0x32, 0xee, 0x4d,
	0x10, 0x27, 0xde, 0xeb, 0x07, 0x13, 0x22, 0xd0, 0x03, 0x0f, 0xb3, 0x98, 0xaa, 0x77, 0xf8, 0xa3,
	0x01, 0x3a, 0x3e, 0xe2, 0x64, 0x9c, 0xa0, 0x38, 0x35, 0x9f, 0x83, 0x0d, 0xf6, 0x86, 0x92, 0xdc,
	0x32, 0x76, 0x8c, 0x7b, 0x1d, 0x7f, 0xef, 0x5d, 0xe1, 0x34, 0xfe, 0x28, 0x9c, 0x4f, 0xa7, 0xb1,
	0x78, 0x39, 0x9f, 0xb8, 0x98, 0xa5, 0x5e, 0x82, 0x29, 0x49, 0xbd, 0x57, 0xd9, 0xe2, 0xd0, 0x13,
	0x8b, 0x8c, 0x70, 0xf7, 0x89, 0xc8, 0x63, 0x3a, 0xdd, 0xc5, 0x78, 0x37, 0x8a, 0x72, 0xc2, 0xf9,
	0xb2, 0x70, 0x7a, 0x0b, 0x94, 0x26, 0x5f, 0x40, 0x09, 0x05, 0x03, 0x05, 0x69, 0x7e, 0x03, 0xda,
	0x39, 0x79, 0x83, 0xf2, 0xc8, 0x6a, 0xee, 0x18, 0xf7, 0xba, 0x0f, 0x87, 0xae, 0xa2, 0xe6, 0x96,
	0xd4, 0x5c, 0x4d, 0xcd, 0x1d, 0xb3, 0x98, 0xfa, 0x37, 0xcb, 0xb8, 0xcb, 0xc2, 0xd9, 0x54, 0x38,
	0xca, 0x0d, 0x06, 0xda, 0x1f, 0xfe, 0x64, 0x80, 0x7e, 0xc9, 0x79, 0x7f, 0x9e, 0x88, 0xf8, 0xff,
	0x27, 0xfe, 0xb8, 0x46, 0xbc, 0xf5, 0xef, 0xc4, 0x6f, 0x69, 0xe2, 0xfd, 0x3a, 0x71, 0x5e, 0x31,
	0xff, 0xd5, 0x00, 0x5b, 0xe3, 0x28, 0xdb, 0x8f, 0xa9, 0x88, 0xe9, 0x54, 0x51, 0x7f, 0x06, 0x40,
	0x09, 0x14, 0xe2, 0x52, 0x92, 0xfc, 0xbb, 0x0f, 0x3f, 0x74, 0xcf, 0xf6, 0xdf, 0x5d, 0x37, 0xc9,
	0x1f, 0x1e, 0x15, 0x8e, 0xb1, 0x2c, 0x9c, 0x6d, 0x15, 0xa4, 0x72, 0x86, 0x41, 0x67, 0xb2, 0x6e,
	0x25, 0x06, 0x7d, 0x15, 0x34, 0x8c, 0x69, 0x44, 0x0e, 0x09, 0xd7, 0xec, 0xef, 0xbc, 0x0f, 0x1d,
	0x48, 0xbb, 0xc7, 0xa5, 0x99, 0x7f, 0x47, 0x67, 0x70, 0xb3, 0x9e, 0xc1, 0x0a, 0x02, 0x06, 0x9b,
	0x79, 0x65, 0x4b, 0x38, 0xfc, 0xd9, 0x00, 0xdd, 0x9a, 0xb7, 0x39, 0x06, 0x5b, 0x98, 0x25, 0x09,
	0x12, 0x24, 0x47, 0x49, 0x58, 0x96, 0x59, 0x37, 0x64, 0xb4, 0x2c, 0x9c, 0x5b, 0x0a, 0xf2, 0x8c,
	0x01, 0x0c, 0xfa, 0x95, 0xe6, 0xe9, 0x22, 0x23, 0xe6, 0x0c, 0xe8, 0x28, 0xe1, 0x0b, 0x84, 0x05,
	0xcb, 0xe5, 0xbc, 0x74, 0xfc, 0x47, 0xba, 0xa7, 0x1f, 0xd7, 0x7a, 0xaa, 0x87, 0x5b, 0xfd, 0x7c,
	0xc6, 0xa3, 0x99, 0x6e, 0xed, 0x1e, 0xc1, 0xcb, 0xc2, 0xb9, 0x71, 0x2a, 0x07, 0x05, 0x06, 0x83,
	0x9e, 0x92, 0x1f, 0x29, 0xf1, 0xb7, 0x26, 0x68, 0x1f, 0xa0, 0x1c, 0xa5, 0xdc, 0xfc, 0xc1, 0x00,
	0x23, 0x1c, 0x65, 0x61, 0xaa, 0xba, 0x13, 0x6a, 0xbf, 0x8c, 0xe4, 0x31, 0x8b, 0xb8, 0x65, 0xc8,
	0xf2, 0xd9, 0x17, 0x95, 0xef, 0x40, 0x9a, 0xf9, 0xf7, 0x75, 0xfd, 0xee, 0xea, 0x64, 0x2f, 0xc4,
	0x83, 0xc1, 0x07, 0x78, 0x3d, 0x09, 0x75, 0x08, 0x6e, 0xce, 0xc0, 0xb6, 0xec, 0x67, 0x98, 0x96,
	0x03, 0x9e, 0x25, 0x31, 0xc9, 0x57, 0xdd, 0xbb, 0xfd, 0x7e, 0xf8, 0xfd, 0xb5, 0x91, 0xbf, 0xa3,
	0x83, 0x5b, 0x3a, 0xf8, 0x59, 0x10, 0x18, 0x0c, 0xa4, 0xae, 0x72, 0xe1, 0xe6, 0x33, 0xd0, 0x51,
	0x76, 0x84, 0x46, 0x56, 0x4b, 0x4e, 0xdf, 0xc8, 0x55, 0x57, 0xc5, 0x5d, 0x5d, 0x15, 0xf7, 0xe9,
	0xea, 0xaa, 0xf8, 0xb7, 0x75, 0x88, 0x41, 0x3d, 0x04, 0xa1, 0x11, 0x7c, 0xfb, 0xa7, 0x63, 0x04,
	0xd7, 0xa5, 0xfc, 0x35, 0x8d, 0xe0, 0xdf, 0x4d, 0xd0, 0xab, 0x67, 0x65, 0xde, 0x07, 0x6d, 0x84,
	0x4b, 0xc2, 0x72, 0x22, 0xae, 0xfb, 0xdb, 0xd5, 0x7e, 0x2b, 0x3d, 0x0c, 0xb4, 0xc1, 0x79, 0x53,
	0xd4, 0xbc, 0xf2, 0x14, 0x7d, 0x0b, 0x36, 0xb8, 0x40, 0xb9, 0xf8, 0x0f, 0x39, 0x59, 0x3a, 0x27,
	0xbd, 0xfd, 0xd2, 0x4d, 0xe5, 0xa3, 0x20, 0xcc, 0x3d, 0xd0, 0x2a, 0xab, 0x73, 0xed, 0x52, 0xa4,
	0xd5, 0xfe, 0x03, 0x85, 0xb4, 0xae, 0x4b, 0xe9, 0x6e, 0xbe, 0x02, 0xa6, 0x3e, 0x08, 0xe5, 0x0c,
	0x84, 0x9c, 0x60, 0x46, 0x23, 0x6b, 0xe3, 0xb2, 0x63, 0x78, 0x57, 0x63, 0x0e, 0x4f, 0xdd, 0x94,
	0x1a, 0x04, 0x0c, 0x06, 0x5a, 0x79, 0x40, 0xf2, 0x27, 0x4a, 0xf5, 0x8b, 0x01, 0x40, 0xd5, 0x65,
	0xf3, 0x23, 0x70, 0x8d, 0xa2, 0x74, 0xb5, 0x8c, 0x5b, 0xcb, 0xc2, 0xe9, 0x2a, 0xb4, 0x52, 0x0b,
	0x03, 0xf9, 0x68, 0x7e, 0x09, 0x36, 0x53, 0x46, 0xc5, 0x4b, 0x1e, 0x26, 0x0c, 0xcf, 0xe6, 0x99,
	0x2c, 0x7a, 0xcb, 0xb7, 0xaa, 0x4d, 0x3a, 0xf5, 0x0c, 0x83, 0x9e, 0x92, 0xbf, 0x93, 0xa2, 0xf9,
	0x3d, 0x68, 0xeb, 0x7d, 0x6d, 0xc9, 0x28, 0x5f, 0x5d, 0x79, 0x5f, 0xf5, 0x38, 0xac, 0x16, 0x55,
	0xc3, 0xf9, 0xbb, 0xef, 0x8e, 0x6d, 0xe3, 0xe8, 0xd8, 0x36, 0xfe, 0x3a, 0xb6, 0x8d, 0xb7, 0x27,
	0x76, 0xe3, 0xe8, 0xc4, 0x6e, 0xfc, 0x7e, 0x62, 0x37, 0x9e, 0x7f, 0x72, 0xfe, 0x79, 0x3f, 0xac,
	0xfe, 0x4e, 0x15, 0xfe, 0xa4, 0x2d, 0x7b, 0xf5, 0xf9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0xb4, 0x35, 0x8d, 0x72, 0x07, 0x00, 0x00,
}

func (m *BaseClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BaseMultiClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseMultiClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseMultiClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Owner.Size()
		i -= size
		if _, err := m.Owner.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CdpMintingClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdpMintingClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdpMintingClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardIndexes) > 0 {
		for iNdEx := len(m.RewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseClaim != nil {
		{
			size, err := m.BaseClaim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIncentive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardFactor.Size()
		i -= size
		if _, err := m.RewardFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClaimEnd, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimEnd):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintIncentive(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.ClaimMultipliers) > 0 {
		for iNdEx := len(m.ClaimMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CdpMintingRewardPeriods) > 0 {
		for iNdEx := len(m.CdpMintingRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CdpMintingRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardsPerSecond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.End):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintIncentive(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x22
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintIncentive(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x1a
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Multiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Multiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Multiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Factor.Size()
		i -= size
		if _, err := m.Factor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MonthsLockup != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MonthsLockup))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.Reward.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *BaseMultiClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovIncentive(uint64(l))
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	return n
}

func (m *CdpMintingClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseClaim != nil {
		l = m.BaseClaim.Size()
		n += 1 + l + sovIncentive(uint64(l))
	}
	if len(m.RewardIndexes) > 0 {
		for _, e := range m.RewardIndexes {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	return n
}

func (m *RewardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	l = m.RewardFactor.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CdpMintingRewardPeriods) > 0 {
		for _, e := range m.CdpMintingRewardPeriods {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	if len(m.ClaimMultipliers) > 0 {
		for _, e := range m.ClaimMultipliers {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimEnd)
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *RewardPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovIncentive(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovIncentive(uint64(l))
	l = m.RewardsPerSecond.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *Multiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	if m.MonthsLockup != 0 {
		n += 1 + sovIncentive(uint64(m.MonthsLockup))
	}
	l = m.Factor.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseMultiClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseMultiClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseMultiClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CdpMintingClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdpMintingClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdpMintingClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseClaim == nil {
				m.BaseClaim = &BaseClaim{}
			}
			if err := m.BaseClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIndexes = append(m.RewardIndexes, RewardIndex{})
			if err := m.RewardIndexes[len(m.RewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdpMintingRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdpMintingRewardPeriods = append(m.CdpMintingRewardPeriods, RewardPeriod{})
			if err := m.CdpMintingRewardPeriods[len(m.CdpMintingRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimMultipliers = append(m.ClaimMultipliers, Multiplier{})
			if err := m.ClaimMultipliers[len(m.ClaimMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClaimEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Multiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Multiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Multiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthsLockup", wireType)
			}
			m.MonthsLockup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthsLockup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Factor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
